#指定nginx运行的用户及用户组,默认为nobody
user  nobody;

#开启的线程数，一般跟逻辑CPU核数一致
worker_processes  1;

#定位全局错误日志文件，级别以notice显示，还有debug,info,warn,error,crit模式，debug输出最多，crir输出最少，根据实际环境而定
error_log   /var/log/nginx/error.log error;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#指定进程id的存储文件位置
pid   /var/log/nginx/run/nginx.pid;

#指定一个nginx进程打开的最多文件描述符数目，受系统进程的最大打开文件数量限制
#worker_rlimit_nofile 65535

events {
    #设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式
    #use epoll;
    
    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。
    worker_connections  1024;
}


http {
    #主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度，DNS主配置文件中的zonerfc1912,acl基本上都是用include语句。
    include       mime.types;
    
    #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式
    default_type  application/octet-stream;
	
	#下面代码为日志格式的设定，main为日志格式的名称，可自行设置，后面引用
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
	
    ## 这里取得原始用户的IP地址,防止CDN后地址错误
    map $http_x_forwarded_for  $clientRealIp
    {
      ""    $remote_addr;
      ~^(?P<firstAddr>[0-9\.]+),?.*$    $firstAddr;
    }
   
    #limit_req_zone $binary_remote_addr zone=one:10m rate=20r/m; ##平均20r/m 
    #limit_conn_zone $binary_remote_addr zone=addr:10m;
    
    #nginx缓存配置(http级别的缓存配置)
    proxy_connect_timeout 500;
    #跟后端服务器连接的超时时间_发起握手等候响应超时时间
    proxy_read_timeout 600;
    #连接成功后_等候后端服务器响应的时间_其实已经进入后端的排队之中等候处理
    proxy_send_timeout 500;
    #后端服务器数据回传时间_就是在规定时间内后端服务器必须传完所有数据
    proxy_buffer_size 128k;
    #代理请求缓存区_这个缓存区间会保存用户的头信息以供Nginx进行规则处理_一般只要能保存下头信息即可  
    proxy_buffers 4 128k;
    #同上 告诉Nginx保存单个用的几个Buffer最大用多大空间
    proxy_busy_buffers_size 256k;
    #如果系统很忙的时候可以申请更大的proxy_buffers 官方推荐*2
    proxy_temp_file_write_size 128k;
    #proxy缓存临时文件的大小   
    proxy_temp_path /root/www/nginxRAM/temp_dir;
    #用于指定本地目录来缓冲较大的代理请求
    proxy_cache_path  /root/www/nginxRAM/cache levels=1:2 keys_zone=cache_one:500m inactive=1d max_size=30g;
    #设置Web缓存区名称为cache_one,内存缓存空间大小为500M,自动清除超过1天没有被访问的缓存数据,硬盘缓存空间大小为30G

    #开启高效文件传输模式
    sendfile        on;
    #开启防止网络阻塞
    #tcp_nopush     on;
    #开启防止网络阻塞
    #tcp_nodelay    on;
    
    #设置客户端连接保存活动的超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;
		 
	#设置客户端请求读取超时时间
    #client_header_timeout 10;
    #设置客户端请求主体读取超时时间
    #client_body_timeout 10;
    #用于设置相应客户端的超时时间
    #send_timeout 
	
    fastcgi_intercept_errors on;
	#开启gzip压缩
    gzip  on;
	#设置允许压缩的页面最小字节数
    gzip_min_length  1024; 
    #（最小压缩的页面，如果页面过于小，可能会越压越大，这里规定大于1K的页面才启用压缩）
    gzip_buffers     4 8k; 
    #（设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流）
    gzip_comp_level 3; 
    #（压缩级别，1压缩比最小处理速度最快，9压缩比最大但处理最慢，同时也最消耗CPU,一般设置为3就可以了）
    gzip_types     text/plain application/javascript application/x-javascript text/css text/javascript application/x-httpd-php image/jpeg image/gif image/png application/octet-stream;
    #指定Vary:Accept-Encoding
	gzip_vary on;
    
	#隐藏版本nginx版本号 设置为off
	server_tokens on;
	
    #设置允许客户端请求的最大的单个文件字节数
    #client_max_body_size 20M;
    #指定来自客户端请求头的headebuffer大小
    #client_header_buffer_size  32k;
    #指定连接请求试图写入缓存文件的目录路径
    #client_body_temp_path /dev/shm/client_body_temp;
    #指定客户端请求中较大的消息头的缓存最大数量和大小，目前设置为4个32KB
    #large client_header_buffers 4 32k;
	
    upstream myapp{  
        server 127.0.0.1:3001;
        keepalive 64;
    }

    upstream php-handler {
        server 127.0.0.1:9000;
        #server unix:/var/run/php5-fpm.sock;
    }    
	
	#########Nginx的server虚拟主机配置
    server {        
	    #监听端口为 80
        listen       80;
		 #设置主机域名
        server_name  ~^(?<subdomain>.+).wecloud.net.cn$;
		
		#设置访问的语言编码
        #charset koi8-r;
		
		#设置虚拟主机访问日志的存放路径及日志的格式为main
        #access_log  logs/host.access.log  main;
		
		index index.html index.htm index.php;
		#解决wecloud.net.cn也重写到www.wecloud.net.cn
	    if ( $http_host ~ ^wecloud.net.cn$ ) 
		{
		    set $subdomain "www";
			#rewrite http://www.wecloud.net.cn/$1 permanent;
		}	    
        #return 301 https://www.wecloud.net.cn$request_uri;		
		#if ( $http_x_requested_with = XMLHttpRequest &&  $http_host !~ /$ )
		#{
			#rewrite ^/(.*[^\/]$) http://www.wecloud.net.cn/$1/ permanent; 
        #}		
		
        root  /root/www/nodejs/trunk/public/$subdomain/;
    
        
		location = /robots.txt {
			allow all;
			log_not_found off;
			access_log off;
		}
		# letsencrypt 需要授权此目录
		location ~ /.well-known {
		  allow all;
		}
		 
		#禁止访问某个目录
		location ~ ^/(?:\.htaccess|data|config|db_structure\.xml|README){
			deny all;
		}   
 
		#设置转发到web后端服务器的URL(正则表达?
		location ~ (^/(servlet|authorization|api|im|wechat|weixin|alipay|WEB-INF|upload|wechatPayNotify|socket.io)|\.jsp$) {
			#使用Web缓存区cache_one
			proxy_redirect off;
			proxy_cache cache_one;
			proxy_cache_valid 200 304 302 5m;
			proxy_cache_valid 301 1m;
			proxy_cache_valid any 1m;
			#通过key来hash，定义KEY的值 
			proxy_cache_key $host$uri$is_args$args;  
			#proxy_ignore_headers Set-Cookie Cache-Control;
			#proxy_hide_header Cache-Control;
			#proxy_hide_header Set-Cookie;
			proxy_pass_header Set-Cookie;
			#$upstream_cache_status表示资源缓存的状态，有HIT MISS EXPIRED三种状态
			add_header X-Cache $upstream_cache_status;
			#expires 30d;
			expires 7d;
			#limit_req zone=one burst=5 nodelay;
			#root  /root/www/nodejs/trunk/public/HTML5/;
			#index  index.html;
			proxy_pass http://myapp;
			proxy_set_header   X-Real-IP            $remote_addr;
			proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
			proxy_set_header   Host                   $http_host;
			proxy_set_header   X-NginX-Proxy    true;
			proxy_set_header   Connection "";
			proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
			proxy_http_version 1.1;
				 
		}
		
         #设置虚拟主机的基本信息
		location  / {
			# limit_conn addr 50;#根据网站并发量设置PV300W，设置为40     
			
             #设置虚拟主机的网站根目录
			root /root/www/nodejs/trunk/public/$subdomain/;
			if ($http_user_agent ~* '(Android|webOS|iPhone|iPod|BlackBerry)') {
				set $mobile_request '1';
			}
			if ($http_cookie ~ 'mobile_request=full') {
				set $mobile_request '';
			}
			#if ($mobile_request = '1') {
			   # rewrite ^.+ http://www.wecloud.net.cn/m$uri;
			   # root   /root/www/nodejs/trunk/public/HTML5/Framework7/;
			#}				
			index   index.html;       
		}
        #移动
		location /m7/ {
			alias /root/www/nodejs/trunk/public/$subdomain/Framework7/;
			index index.html;        
		} 
		#要缓存文件的后缀
		location ~ .*＼.(gif|jpg|png|css|html|htm|ico|swf|flv|js|ttf)$ {
			root   /root/www/nodejs/trunk/public/$subdomain/;
			#proxy_pass http://myapp;
			proxy_redirect off;
			#proxy_set_header Host $host;
			#设置缓存共享内存#此处的cache_one必须于上一步配置的缓存区域名称相同
			proxy_cache cache_one; 
			#设置http状态码为200,302缓存时间，24h为24小时
			proxy_cache_valid 200 302 304 3d;			 
			proxy_cache_valid 301 1m;
			proxy_cache_valid any 1m;
			#通过key来hash，定义KEY的值 
			proxy_cache_key $host$uri$is_args$args;   
			proxy_pass_header Set-Cookie;   
			#$upstream_cache_status表示资源缓存的状态，有HIT MISS EXPIRED三种状态			 
			add_header X-Cache $upstream_cache_status;
            add_header Pragma public;
            add_header Cache-Control "public";
			expires 30d;
			#其余类型的缓存时效为30天
            proxy_set_header X-Forwarded-Proto $scheme;

		}
		
		# 用于清除缓存，假设一个URL为http://192.168.8.42/test.txt，通过访问http://192.168.8.42 /purge/test.txt就可以清除该URL的缓存。
		#location ~ /purge(/.*){
			#	 #设置只允许指定的IP或IP段才可以清除URL缓存。
			#	 allow            127.0.0.1;
			#	 allow            192.168.0.0/16;
			#	 deny            all;
			#	 proxy_cache_purge    cache_one   $host$1$is_args$args;
		#}    
			
		#单独某类型文件不进行缓存
		#location ~ .*/.(css|js)$ {
		#	add_header Cache-Control 'no-store';
		#}
			
		#普通PHP配置(KODExplorer-master和禅道)
		location ~ \.php$ {
			#root  /root/www/nodejs/trunk/public/www/;
			fastcgi_pass 127.0.0.1:9000;
			fastcgi_index index.php;
			fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
			include fastcgi_params;
		    break;
		}
		   
		#owncloud
		#location ~ \.php(?:$|/) {
			 #root  /root/www/nodejs/trunk/public/www/;
			 #fastcgi_split_path_info ^(.+\.php)(/.+)$;
			 #include fastcgi_params;
			 #fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
			 #fastcgi_param PATH_INFO $fastcgi_path_info;
			 #fastcgi_pass php-handler;
		 #}
		  

		#一般资源防盗链
		location ~* \.(?:jpg|jpeg|gif|bmp|ico|png|css|flv|js|swf)$ {
					#concat on;
			#concat_max_files 20;  
			#concat_unique off;
			root   /root/www/nodejs/trunk/public/$subdomain/;
			valid_referers none blocked wecloud.net.cn *.wecloud.net.cn 115.29.145.75 wechat.audio wechat.trade alipay.audio wechat.poker;
			if ($invalid_referer) {
			  rewrite ^/ http://www.wecloud.net.cn/images/antiLeech.jpg;
			  #return 403;
			}
			access_log off;
		}
		
		#针对目录防止盗链
		#location /images/ { 
		# alias /data/images/; 
		# valid_referers none blocked server_names 115.29.145.75 ; 
		# if ($invalid_referer) {
		#     return 404;
		# } 
		#}
		#http svn服务
		location /svn{
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-Proto https;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_pass http://127.0.0.1:8080/svn/;         
		}
   
		
           
        error_page  404  /404.html;
      
        # redirect server error pages to the static page /50x.html
        #
        
        error_page 500 502 503 504 /500.html;
        






        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    server {
      listen	 443 ssl http2 default_server;
      #server_name  wecloud.net.cn;
	  server_name  ~^(?<subdomain>.+).wecloud.net.cn$;
      ssl on;
      ssl_certificate /etc/letsencrypt/live/wecloud.net.cn/fullchain.pem;
      ssl_certificate_key /etc/letsencrypt/live/wecloud.net.cn/privkey.pem;
      ssl_session_cache shared:SSL:1m;
      ssl_session_timeout  10m;
      ssl_prefer_server_ciphers on;
      ssl_dhparam /etc/ssl/certs/dhparam.pem;
	  
	  #http2新增
      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
      ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置
	
	  #设置虚拟主机的基本信息
	  location  / {
		# limit_conn addr 50;#根据网站并发量设置PV300W，设置为40     
		
		#设置虚拟主机的网站根目录
		root /root/www/nodejs/trunk/public/www/;
		if ($http_user_agent ~* '(Android|webOS|iPhone|iPod|BlackBerry)') {
			set $mobile_request '1';
		}
		if ($http_cookie ~ 'mobile_request=full') {
			set $mobile_request '';
		}
		#if ($mobile_request = '1') {
		   # rewrite ^.+ http://www.wecloud.net.cn/m$uri;
		   # root   /root/www/nodejs/trunk/public/HTML5/Framework7/;
		#}				
		index   index.html index.htm index.php;       
	  }


        location = /robots.txt {
			allow all;
			log_not_found off;
			access_log off;
		}
		# letsencrypt 需要授权此目录
		location ~ /.well-known {
		  allow all;
		}
		 
		#禁止访问某个目录
		location ~ ^/(?:\.htaccess|data|config|db_structure\.xml|README){
			deny all;
		}   
 
		#设置转发到web后端服务器的URL(正则表达?
		location ~ (^/(servlet|authorization|api|im|wechat|weixin|alipay|WEB-INF|upload|wechatPayNotify|socket.io)|\.jsp$) {
			#使用Web缓存区cache_one
			proxy_redirect off;
			proxy_cache cache_one;
			proxy_cache_valid 200 304 302 5m;
			proxy_cache_valid 301 1m;
			proxy_cache_valid any 1m;
			#通过key来hash，定义KEY的值 
			proxy_cache_key $host$uri$is_args$args;  
			#proxy_ignore_headers Set-Cookie Cache-Control;
			#proxy_hide_header Cache-Control;
			#proxy_hide_header Set-Cookie;
			proxy_pass_header Set-Cookie;
			#$upstream_cache_status表示资源缓存的状态，有HIT MISS EXPIRED三种状态
			add_header X-Cache $upstream_cache_status;
			#expires 30d;
			expires 7d;
			#limit_req zone=one burst=5 nodelay;
			#root  /root/www/nodejs/trunk/public/HTML5/;
			#index  index.html;
			proxy_pass http://myapp;
			proxy_set_header   X-Real-IP            $remote_addr;
			proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
			proxy_set_header   Host                   $http_host;
			proxy_set_header   X-NginX-Proxy    true;
			proxy_set_header   Connection "";
			proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
			proxy_http_version 1.1;
				 
		}
		
        #移动
		location /m7/ {
			alias /root/www/nodejs/trunk/public/$subdomain/Framework7/;
			index index.html;        
		} 
		#要缓存文件的后缀
		location ~ .*＼.(gif|jpg|png|css|html|htm|ico|swf|flv|js|ttf)$ {
			root   /root/www/nodejs/trunk/public/$subdomain/;
			#proxy_pass http://myapp;
			proxy_redirect off;
			#proxy_set_header Host $host;
			#设置缓存共享内存#此处的cache_one必须于上一步配置的缓存区域名称相同
			proxy_cache cache_one; 
			#设置http状态码为200,302缓存时间，24h为24小时
			proxy_cache_valid 200 302 304 3d;			 
			proxy_cache_valid 301 1m;
			proxy_cache_valid any 1m;
			#通过key来hash，定义KEY的值 
			proxy_cache_key $host$uri$is_args$args;   
			proxy_pass_header Set-Cookie;   
			#$upstream_cache_status表示资源缓存的状态，有HIT MISS EXPIRED三种状态			 
			add_header X-Cache $upstream_cache_status;
            add_header Pragma public;
            add_header Cache-Control "public";
			expires 30d;
			#其余类型的缓存时效为30天
            proxy_set_header X-Forwarded-Proto $scheme;

		}
			
		#普通PHP配置(KODExplorer-master和禅道)
		location ~ \.php$ {
			root  /root/www/nodejs/trunk/public/$subdomain/;
			fastcgi_pass 127.0.0.1:9000;
			fastcgi_index index.php;
			fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
			include fastcgi_params;
		   
		}
		   
		#owncloud
		location ~ \.php(?:$|/) {
			 root  /root/www/nodejs/trunk/public/$subdomain/;
			 fastcgi_split_path_info ^(.+\.php)(/.+)$;
			 include fastcgi_params;
			 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
			 fastcgi_param PATH_INFO $fastcgi_path_info;
			 #fastcgi_param HTTPS on;
			 fastcgi_pass php-handler;
		}
		  

		#一般资源防盗链
		location ~* \.(?:jpg|jpeg|gif|bmp|ico|png|css|flv|js|swf)$ {
					#concat on;
			#concat_max_files 20;  
			#concat_unique off;
			root   /root/www/nodejs/trunk/public/$subdomain/;
			valid_referers none blocked wecloud.net.cn *.wecloud.net.cn 115.29.145.75 wechat.audio wechat.trade alipay.audio wechat.poker;
			if ($invalid_referer) {
			  rewrite ^/ http://www.wecloud.net.cn/images/antiLeech.jpg;
			  #return 403;
			}
			access_log off;
		}
		
		#针对目录防止盗链
		#location /images/ { 
		# alias /data/images/; 
		# valid_referers none blocked server_names 115.29.145.75 ; 
		# if ($invalid_referer) {
		#     return 404;
		# } 
		#}
		#http svn服务
		location /svn{
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-Proto https;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_pass http://127.0.0.1:8080/svn/;         
		}
	  
    }	
}
